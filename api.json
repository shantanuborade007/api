
"openapi": "3.0.0",
"paths": {
  "/metrics": {
    "get": {
      "operationId": "MetricsController_index",
      "parameters": [],
      "responses": {
        "200": {
          "description": ""
        }
      },
      "tags": [
        "Metrics"
      ]
    }
  },
  "/email-notifications/orgs/{orgId}/templates/{templateId}/notify": {
    "post": {
      "operationId": "NotificationsController_sendNotification",
      "summary": "send email with given template for particular org",
      "description": "This endpoint can be called by email-notifications role or inter-service role .",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "orgId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/NotificationsRequest"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "description": "Send the invitation to org members",
                "value": {
                  "senderUserId": "cc838f13-bac6-4f4b-9043-a50459f99d63",
                  "recipientUserIds": [
                    "89d466d1-8a56-4f54-8e3c-b8129060a060",
                    "87cf86bf-16f9-43cc-ba82-98b1fcfedd2a"
                  ],
                  "locale": "en",
                  "templateMetaData": {
                    "sessionStartDate": "01-09-2024"
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "202": {
          "description": "Notification successfully triggered"
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "429": {
          "description": "Too Many Requests",
          "headers": {
            "Retry-After": {
              "description": "The number of seconds to wait before making the next request",
              "schema": {
                "type": "integer",
                "example": 10
              }
            }
          }
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Notifications"
      ]
    }
  },
  "/email-notifications/orgs/{orgId}": {
    "get": {
      "operationId": "NotificationsController_getNotificationsByOrgId",
      "summary": "Get list of Notifications sent for specific OrgId",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "dateTo",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "dateFrom",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "offset",
          "required": false,
          "in": "query",
          "description": "Defines how many results to skip",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "limit",
          "required": false,
          "in": "query",
          "description": "Defines total number of results shown per page",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "orgId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Notifications successfully fetched",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationResponse"
              }
            }
          }
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Notifications"
      ]
    }
  },
  "/email-notifications/orgs/{orgId}/product/{productId}": {
    "get": {
      "operationId": "NotificationsController_getNotificationsByOrgIdAndProductId",
      "summary": "Get list of Notifications sent for specific OrgId and ProductId",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "dateTo",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "dateFrom",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "offset",
          "required": false,
          "in": "query",
          "description": "Defines how many results to skip",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "limit",
          "required": false,
          "in": "query",
          "description": "Defines total number of results shown per page",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "productId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "orgId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Notifications successfully fetched",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationResponse"
              }
            }
          }
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Notifications"
      ]
    }
  },
  "/email-notifications/orgs/{orgId}/templates/{templateId}": {
    "get": {
      "operationId": "NotificationsController_getNotificationsForOrgIdAndTemplateId",
      "summary": "Get list of Notifications sent for specific orgId and templateId",
      "description": "This endpoint can be called by Superadmin role or email-notifications role.",
      "parameters": [
        {
          "name": "dateTo",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "dateFrom",
          "required": false,
          "in": "query",
          "schema": {
            "format": "date-time",
            "type": "string"
          }
        },
        {
          "name": "offset",
          "required": false,
          "in": "query",
          "description": "Defines how many results to skip",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "limit",
          "required": false,
          "in": "query",
          "description": "Defines total number of results shown per page",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "orgId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Notifications successfully fetched",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationResponse"
              }
            }
          }
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Notifications"
      ]
    }
  },
  "/email-notifications/orgs/{orgId}/templates/{templateId}/notify/invite": {
    "post": {
      "operationId": "NotificationsController_sendNotificationForInvite",
      "summary": "send invitation email with given template for particular org",
      "description": "This endpoint can be called by inter-service role .",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "orgId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/InviteNotificationsRequestPayload"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "description": "Send the invitation to org members",
                "value": {
                  "recipientsId": "785ebf74-cd92-4915-be4a-31a8bf9b2ee4",
                  "recipientEmail": "johndoe@noreply.com",
                  "locale": "en",
                  "templateMetadata": {
                    "invitationURL": "https://atlas.ptc.com/id/123",
                    "org_name": "ACME",
                    "products": [
                      "windchillplus",
                      "creoplus"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "responses": {
        "202": {
          "description": "Invite Notification successfully triggered"
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "429": {
          "description": "Too Many Requests",
          "headers": {
            "Retry-After": {
              "description": "The number of seconds to wait before making the next request",
              "schema": {
                "type": "integer",
                "example": 10
              }
            }
          }
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Notifications"
      ]
    }
  },
  "/email-notifications/templates/me": {
    "get": {
      "operationId": "TemplatesController_getTemplatesForAuthenticatedPrincipal",
      "summary": "Get list of templates available for the authenticated principal",
      "description": "This endpoint can be called by email-notifications role or inter-service role",
      "parameters": [],
      "responses": {
        "200": {
          "description": "Templates successfully fetched",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplatesResponse"
              }
            }
          }
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates": {
    "post": {
      "operationId": "TemplatesController_registerTemplates",
      "summary": "Register / Create New Template in System ",
      "description": "This endpoint can be called by Superadmin and service with INTER-SERVICE role.",
      "parameters": [],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/RegisterTemplatesRequest"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "description": "Register a new template to the system. Note that metadata_type should be one of the following: string, array, regex-Expression, ptc_url, url, email, image or number.",
                "value": {
                  "templateName": "test template",
                  "templateDescription": "This is test template name",
                  "templateCustomMetadata": [
                    {
                      "metadata_name": "Link",
                      "metadata_description": "This is a link used by recipient",
                      "metadata_type": "ptc_url",
                      "metadata_min_size": 0,
                      "metadata_max_size": 0,
                      "metadata_required": true
                    },
                    {
                      "metadata_name": "Image",
                      "metadata_description": "This is a image used to attach in email",
                      "metadata_type": "image",
                      "metadata_min_size": 0,
                      "metadata_max_size": 50000,
                      "metadata_required": false
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Template Successfully added to system"
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    },
    "get": {
      "operationId": "TemplatesController_getTemplates",
      "summary": "fetch all templates",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "x-ptc-product-code",
          "required": false,
          "in": "header",
          "description": "Filter templates as per product code",
          "schema": {
            "type": "string",
            "enum": [
              "creoplus",
              "wncplus",
              "kepwareplus",
              "ptcservices",
              "expertcapture",
              "vuforiastudio",
              "solution-manager"
            ]
          }
        },
        {
          "name": "offset",
          "required": false,
          "in": "query",
          "description": "Defines how many results to skip",
          "schema": {
            "type": "number"
          }
        },
        {
          "name": "limit",
          "required": false,
          "in": "query",
          "description": "Defines total number of results shown per page",
          "schema": {
            "type": "number"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Templates successfully fetched",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplatesResponse"
              }
            }
          }
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}": {
    "get": {
      "operationId": "TemplatesController_getTemplate",
      "summary": "Get details of a template with template Id.",
      "description": "This endpoint can be called by Superadmin role or inter-service role or email-notifications role.",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Template successfully fetched"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    },
    "put": {
      "operationId": "TemplatesController_replaceTemplateDetails",
      "summary": "Replace template Details like Description and CustomMetadata",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReplaceTemplateRequest"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "description": "Replace template Details like Description and CustomMetadata. Note that metadata_type should be one of the following: string, array, regex-Expression, ptc_url, url, email, image or number.",
                "value": {
                  "templateDescription": "This is test template name",
                  "templateCustomMetadata": [
                    {
                      "metadata_name": "Link",
                      "metadata_description": "This is a link used by recipient",
                      "metadata_type": "ptc_url",
                      "metadata_min_size": 0,
                      "metadata_max_size": 0,
                      "metadata_required": true
                    },
                    {
                      "metadata_name": "Image",
                      "metadata_description": "This is a image used to attach in email",
                      "metadata_type": "image",
                      "metadata_min_size": 0,
                      "metadata_max_size": 50000,
                      "metadata_required": false
                    },
                    {
                      "metadata_name": "Regex-Expression",
                      "metadata_description": "This is a regex expression",
                      "metadata_type": "regex-^(0?[1-9]|[12][0-9]|3[01])(\\/|.|-)(0?[1-9]|1[012])",
                      "metadata_min_size": 0,
                      "metadata_max_size": 0,
                      "metadata_required": true
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Template successfully Updated"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    },
    "patch": {
      "operationId": "TemplatesController_partiallyUpdateTemplateDetails",
      "summary": "Partially Update template Details like Description and CustomMetadata",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PartialUpdateTemplateRequestPayload"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "description": "Partially update template Details like Description and CustomMetadata. Note that metadata_type should be one of the following: string, array, regex-Expression, ptc_url, url, email, image or number.",
                "value": {
                  "templateDescription": "This is test template name",
                  "templateCustomMetadata": [
                    {
                      "metadata_name": "Link",
                      "metadata_description": "This is a link used by recipient",
                      "metadata_required": true
                    },
                    {
                      "metadata_name": "Image",
                      "metadata_min_size": 0,
                      "metadata_max_size": 50000
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Template successfully Updated"
        },
        "400": {
          "description": "Returns Bad request if the request body and/or params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "503": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}/enable": {
    "post": {
      "operationId": "TemplatesController_enableTemplate",
      "summary": "Change the status of the template to Enabled",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Record updated successfully"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}/disable": {
    "post": {
      "operationId": "TemplatesController_disableTemplate",
      "summary": "Change the status of the template to Disabled",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Record updated successfully"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}/products/{productId}": {
    "post": {
      "operationId": "TemplatesController_assignProductToTemplate",
      "summary": "Give access to the template for a product.",
      "description": "This endpoint can be called by Superadmin role.",
      "parameters": [
        {
          "name": "productId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique code identifier for a template.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrincipalDTO"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "value": {
                  "pid": "761ab8c6-ab78-4f74-9e56-c2ea04875f60"
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Template successfully assigned to product"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}/products/{productId}/{pid}": {
    "delete": {
      "operationId": "TemplatesController_revokeProductAccessToTemplate",
      "summary": "Revoke Product Access to the Template",
      "description": "This endpoint can be called by Super-admin role. and it will allows to revoke product access to the template",
      "parameters": [
        {
          "name": "pid",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "productId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "responses": {
        "204": {
          "description": "Product Access successfully removed from template"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "503": {
          "description": "Returns error if an service unavailable to use"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  },
  "/email-notifications/templates/{templateId}/products": {
    "post": {
      "operationId": "TemplatesController_genericProductAccessToTemplate",
      "summary": "Give Generic access to the template.",
      "description": "This endpoint can be called by Super-admin role. and it will allows to provide access to the template",
      "parameters": [
        {
          "name": "templateId",
          "required": true,
          "in": "path",
          "description": "Unique identifier for all organizations.",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PrincipalDTO"
            },
            "examples": {
              "a": {
                "summary": "Example 1",
                "value": {
                  "pid": "761ab8c6-ab78-4f74-9e56-c2ea04875f60"
                }
              }
            }
          }
        }
      },
      "responses": {
        "201": {
          "description": "Template successfully assigned to product"
        },
        "400": {
          "description": "Returns Bad request if the params are malformed"
        },
        "404": {
          "description": "Returns Not found if the resource doesn't exist"
        },
        "500": {
          "description": "Returns error if an internal server error occurs"
        }
      },
      "tags": [
        "Templates"
      ]
    }
  }
},
"info": {
  "title": "Email Notification Service",
  "description": "A service which handles processing and sending notifications\u003Cbr\u003E\u003Cbr\u003EInternal URL - http://email-notifications-service.iam.svc.cluster.local/email-notifications",
  "version": "0.0.1",
  "contact": {

  }
},
"tags": [],
"servers": [],
"components": {
  "schemas": {
    "NotificationsRequest": {
      "type": "object",
      "properties": {
        "senderUserId": {
          "type": "string"
        },
        "recipientUserIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locale": {
          "type": "string"
        },
        "templateMetaData": {
          "type": "object"
        }
      },
      "required": [
        "senderUserId",
        "recipientUserIds",
        "locale"
      ]
    },
    "NotificationResponse": {
      "type": "object",
      "properties": {

      }
    },
    "InviteNotificationsRequestPayload": {
      "type": "object",
      "properties": {
        "recipientsId": {
          "type": "string"
        },
        "recipientEmail": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "templateMetadata": {
          "type": "object"
        }
      },
      "required": [
        "recipientsId",
        "recipientEmail",
        "locale",
        "templateMetadata"
      ]
    },
    "TemplatesResponse": {
      "type": "object",
      "properties": {

      }
    },
    "TemplateCustomMetaData": {
      "type": "object",
      "properties": {
        "metadata_name": {
          "type": "string"
        },
        "metadata_description": {
          "type": "string"
        },
        "metadata_type": {
          "type": "string"
        },
        "metadata_min_size": {
          "type": "number"
        },
        "metadata_max_size": {
          "type": "number"
        },
        "metadata_required": {
          "type": "boolean"
        }
      },
      "required": [
        "metadata_name",
        "metadata_type",
        "metadata_required"
      ]
    },
    "RegisterTemplatesRequest": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string"
        },
        "templateDescription": {
          "type": "string"
        },
        "templateCustomMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TemplateCustomMetaData"
          }
        }
      },
      "required": [
        "templateName",
        "templateCustomMetadata"
      ]
    },
    "ReplaceTemplateRequest": {
      "type": "object",
      "properties": {
        "templateDescription": {
          "type": "string"
        },
        "templateCustomMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/TemplateCustomMetaData"
          }
        }
      }
    },
    "PartiallyUpdateCustomMetadataRequest": {
      "type": "object",
      "properties": {
        "metadata_name": {
          "type": "string"
        },
        "metadata_description": {
          "type": "string"
        },
        "metadata_type": {
          "type": "string"
        },
        "metadata_min_size": {
          "type": "number"
        },
        "metadata_max_size": {
          "type": "number"
        },
        "metadata_required": {
          "type": "boolean"
        }
      },
      "required": [
        "metadata_name"
      ]
    },
    "PartialUpdateTemplateRequestPayload": {
      "type": "object",
      "properties": {
        "templateDescription": {
          "type": "string"
        },
        "templateCustomMetadata": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PartiallyUpdateCustomMetadataRequest"
          }
        }
      }
    },
    "PrincipalDTO": {
      "type": "object",
      "properties": {

      }
    }
  }
}
}